name: Release

on:
  push:
    branches: ["main"]

jobs:
  lint:
    name: Run lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@master
      - uses: actions/setup-node@master
        with:
          node-version: 14.x
      - name: Cache Node.js modules
        uses: actions/cache@v1
        with:
          path: ~/.npm # npm cache files are stored in `~/.npm` on Linux/macOS
          key: ${{ runner.OS }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.OS }}-node-
            ${{ runner.OS }}-
      - name: Install Packages
        run: npm ci
      - name: Lint
        run: npm run lint
  dependency-check:
    name: Run dependency check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@master
      - uses: actions/setup-node@master
        with:
          node-version: 14.x
      - name: Cache Node.js modules
        uses: actions/cache@v1
        with:
          path: ~/.npm # npm cache files are stored in `~/.npm` on Linux/macOS
          key: ${{ runner.OS }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.OS }}-node-
            ${{ runner.OS }}-
      - name: Install Packages
        run: npm ci
      - name: Dependency Check
        run: npm run depcheck
  tests:
    name: Run tests
    runs-on: ubuntu-latest
    env:
      DB_HOST: localhost
      DB_PORT: 5432
      DB_USERNAME: ${{ secrets.TEST_PG_USER }}
      DB_PASSWORD: ${{ secrets.TEST_PG_PASS }}
      DB_NAME: ${{ secrets.TEST_PG_DB }}

    steps:
      - uses: actions/checkout@master
      - uses: actions/setup-node@master
        with:
          node-version: 14.x
      - name: Cache Node.js modules
        uses: actions/cache@v1
        with:
          path: ~/.npm # npm cache files are stored in `~/.npm` on Linux/macOS
          key: ${{ runner.OS }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.OS }}-node-
            ${{ runner.OS }}-
      - name: Install Packages
        run: npm ci
      - name: Setup dependencies
        run: docker-compose up -d
      - name: Sleep
        uses: kibertoad/wait-action@1.0.1
        with:
          time: '30s'
      - name: Run tests
        run: npm run test
  check-version:
    name: "Check version"
    needs: [lint, dependency-check, tests]
    runs-on: ubuntu-latest
    outputs:
      is_new_version: ${{ steps.get_version.outputs.IS_NEW_VERSION }}
      version: ${{ steps.get_version.outputs.VERSION }}
      build_date: ${{ steps.get_version.outputs.BUILD_DATE }}
      is_prerelease: ${{ steps.get_version.outputs.IS_PRERELEASE }}
      npm_release_tag: ${{ steps.get_version.outputs.NPM_RELEASE_TAG }}

    steps:
      - uses: actions/checkout@v2
      - run: git fetch --depth=1 --tags origin
      - name: Check Build Version
        id: get_version
        run: ./scripts/check-version.sh
        shell: bash
      - name: Skipping release as version has not increased
        if: steps.get_version.outputs.IS_NEW_VERSION != 'true'
        shell: bash
        run: |
          echo "Skipping release as current version has already been published"

  publish:
    name: "Publish package"
    needs: [check-version]
    runs-on: ubuntu-latest
    if: ${{ needs.check-version.outputs.is_new_version == 'true' }}

    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v1
        with:
          node-version: '14.x'
          registry-url: 'https://npm.pkg.github.com'
          scope: '@digicatapult' # Defaults to the user or organization that owns the workflow file
      - name: Build Github release for version
        uses: 'marvinpinto/action-automatic-releases@latest'
        with:
          repo_token: '${{ secrets.GITHUB_TOKEN }}'
          automatic_release_tag: ${{ needs.check-version.outputs.version }}
          prerelease: ${{ needs.check-version.outputs.is_prerelease == 'true' }}
          title: Release ${{ needs.check-version.outputs.version }}
      - name: Build Github latest release
        uses: 'marvinpinto/action-automatic-releases@latest'
        if: ${{ needs.check-version.outputs.is_prerelease == 'false' }}
        with:
          repo_token: '${{ secrets.GITHUB_TOKEN }}'
          automatic_release_tag: latest
          prerelease: false
          title: Latest Release ${{ needs.check-version.outputs.version }}
      - run: npm ci
      - name: Publish to github packages
        run: npm publish --tag ${{ needs.check-version.outputs.npm_release_tag }} --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
